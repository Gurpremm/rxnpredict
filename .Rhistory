ggsave(file=filename, width=5, height=3)
}
# ============================================================================
# Load yield data and stitch it together
# ============================================================================
# In my case, there were 3 1536-well plates and the data for each plate
# was analyzed by quadrant (via 4 384-well plates)
# Plate 1.1
plate1.1 <- read.csv("yield_data\\plate1.1.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate1.1_pdt <- plate1.1$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate1.1_pdt))
dim(plate.data) <- c(24,16)
plate.data1.1 <- t(plate.data)
# Plate 1.2
plate1.2 <- read.csv("yield_data\\plate1.2.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate1.2_pdt <- plate1.2$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate1.2_pdt))
dim(plate.data) <- c(24,16)
plate.data1.2 <- t(plate.data)
# Plate 1.3
plate1.3 <- read.csv("yield_data\\plate1.3.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate1.3_pdt <- plate1.3$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate1.3_pdt))
dim(plate.data) <- c(24,16)
plate.data1.3 <- t(plate.data)
# Plate 1.4
plate1.4 <- read.csv("yield_data\\plate1.4.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate1.4_pdt <- plate1.4$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate1.4_pdt))
dim(plate.data) <- c(24,16)
plate.data1.4 <- t(plate.data)
# stitch Plate 1 together into one 32x48 matrix
plate1.top <- cbind(plate.data1.1, plate.data1.2)
plate1.bottom <- cbind(plate.data1.3, plate.data1.4)
plate1 <- rbind(plate1.top, plate1.bottom)
# Plate 2.1
plate2.1 <- read.csv("yield_data\\plate2.1.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate2.1_pdt <- plate2.1$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate2.1_pdt))
dim(plate.data) <- c(24,16)
plate.data2.1 <- t(plate.data)
# Plate 2.2
plate2.2 <- read.csv("yield_data\\plate2.2.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate2.2_pdt <- plate2.2$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate2.2_pdt))
dim(plate.data) <- c(24,16)
plate.data2.2 <- t(plate.data)
# Plate 2.3
plate2.3 <- read.csv("yield_data\\plate2.3.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate2.3_pdt <- plate2.3$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate2.3_pdt))
dim(plate.data) <- c(24,16)
plate.data2.3 <- t(plate.data)
# Plate 2.4
plate2.4 <- read.csv("yield_data\\plate2.4.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate2.4_pdt <- plate2.4$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate2.4_pdt))
dim(plate.data) <- c(24,16)
plate.data2.4 <- t(plate.data)
# stitch Plate 2 together into one 32x48 matrix
plate2.top <- cbind(plate.data2.1, plate.data2.2)
plate2.bottom <- cbind(plate.data2.3, plate.data2.4)
plate2 <- rbind(plate2.top, plate2.bottom)
# Plate 3.1
plate3.1 <- read.csv("yield_data\\plate3.1.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate3.1_pdt <- plate3.1$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate3.1_pdt))
dim(plate.data) <- c(24,16)
plate.data3.1 <- t(plate.data)
# Plate 3.2
plate3.2 <- read.csv("yield_data\\plate3.2.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate3.2_pdt <- plate3.2$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate3.2_pdt))
dim(plate.data) <- c(24,16)
plate.data3.2 <- t(plate.data)
# Plate 3.3
plate3.3 <- read.csv("yield_data\\plate3.3.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate3.3_pdt <- plate3.3$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate3.3_pdt))
dim(plate.data) <- c(24,16)
plate.data3.3 <- t(plate.data)
# Plate 3.4
plate3.4 <- read.csv("yield_data\\plate3.4.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate3.4_pdt <- plate3.4$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate3.4_pdt))
dim(plate.data) <- c(24,16)
plate.data3.4 <- t(plate.data)
# stitch Plate 3 together into one 32x48 matrix
plate3.top <- cbind(plate.data3.1, plate.data3.2)
plate3.bottom <- cbind(plate.data3.3, plate.data3.4)
plate3 <- rbind(plate3.top, plate3.bottom)
# ============================================================================
# Make heatmaps and histograms
# ============================================================================
# Plate 1 heatmap and histogram
plate1.txt <- format(round(plate1, 0), nsmall = 0)
makeHeatmap1536(plate1, plate1.txt, "yield_data\\plate1_heatmap.png")
plate1 <- as.data.frame(plate1)
ggHist(plate1, "yield_data\\plate1_histogram.png")
# Plate 2 heatmap and histogram
plate2.txt <- format(round(plate2, 0), nsmall = 0)
makeHeatmap1536(plate2, plate2.txt, "yield_data\\plate2_heatmap.png")
plate2 <- as.data.frame(plate2)
ggHist(plate2, "yield_data\\plate2_histogram.png")
# Plate 3 heatmap and histogram
plate3.txt <- format(round(plate3, 0), nsmall = 0)
makeHeatmap1536(plate3, plate3.txt, "yield_data\\plate3_heatmap.png")
plate3 <- as.data.frame(plate3)
ggHist(plate3, "yield_data\\plate3_histogram.png")
# All plates histogram
top.two <- rbind(plate1, plate2)
all.plates <- rbind(top.two, plate3)
all.plates <- as.data.frame(all.plates)
ggHist(all.plates, "yield_data\\allplates_histogram.png")
# ============================================================================
# Load and prepare output table for modeling
# ============================================================================
# Remove reactions without additive and reactions with additive 7
plate1_nocontrols <- plate1[c(-1,-5,-9,-13,-20,-24,-28,-32), c(-16,-32,-48)]
# Remove reactions without aryl halide
plate2_nocontrols <- plate2[, c(-16,-32,-48)]
plate3_nocontrols <- plate3[, c(-16,-32,-48)]
plate1_nocontrols_v <- as.vector(t(plate1_nocontrols))
plate2_nocontrols_v <- as.vector(t(plate2_nocontrols))
plate3_nocontrols_v <- as.vector(t(plate3_nocontrols))
yield_data <- c(plate1_nocontrols_v, plate2_nocontrols_v, plate3_nocontrols_v)
# load output table generated by python script
output.table <- read.csv("R\\output_table.csv", header=TRUE)
# scale the descriptor data
output.scaled <- as.data.frame(scale(output.table))
# append the yield data from above
output.scaled$yield <- yield_data
# Uncomment and run line below to view large datasets
# utils::View(output.scaled)
# ============================================================================
# Subset the data to prepare for out-of-sample prediction
# ============================================================================
# separate into plates 1,2,3 and remove NA
output.plate1 <- output.scaled[1:1080, ]
output.plate1 <- output.plate1[!(is.na(output.plate1$yield)), ]
output.plate2 <- output.scaled[1081:2520, ]
output.plate2 <- output.plate2[!(is.na(output.plate2$yield)), ]
output.plate3 <- output.scaled[2521:3960, ]
output.plate3 <- output.plate3[!(is.na(output.plate3$yield)), ]
# separate by all 15 aryl halides
CF3.Cl <- seq(1, nrow(output.scaled), by=15)
CF3.Br <- seq(2, nrow(output.scaled), by=15)
CF3.I <- seq(3, nrow(output.scaled), by=15)
OMe.Cl <- seq(4, nrow(output.scaled), by=15)
OMe.Br <- seq(5, nrow(output.scaled), by=15)
OMe.I <- seq(6, nrow(output.scaled), by=15)
Et.Cl <- seq(7, nrow(output.scaled), by=15)
Et.Br <- seq(8, nrow(output.scaled), by=15)
Et.I <- seq(9, nrow(output.scaled), by=15)
pyr2.Cl <- seq(10, nrow(output.scaled), by=15)
pyr2.Br <- seq(11, nrow(output.scaled), by=15)
pyr2.I <- seq(12, nrow(output.scaled), by=15)
pyr3.Cl <- seq(13, nrow(output.scaled), by=15)
pyr3.Br <- seq(14, nrow(output.scaled), by=15)
pyr3.I <- seq(15, nrow(output.scaled), by=15)
# separate by chloride, bromide, iodide
ArCl <- seq(1, nrow(output.scaled), by=3)
ArCl.scaled <- output.scaled[ArCl, ]
ArCl.scaled <- ArCl.scaled[!(is.na(ArCl.scaled$yield)), ]
set.seed(8390)
size <- round(0.70*nrow(ArCl.scaled))
training <- sample(nrow(ArCl.scaled), size=size, replace=FALSE)
ArCl.training <- ArCl.scaled[training, ]
ArCl.test <- ArCl.scaled[-training, ]
ArBr <- seq(2, nrow(output.scaled), by=3)
ArBr.scaled <- output.scaled[ArBr, ]
ArBr.scaled <- ArBr.scaled[!(is.na(ArBr.scaled$yield)), ]
set.seed(9071)
size <- round(0.70*nrow(ArBr.scaled))
training <- sample(nrow(ArBr.scaled), size=size, replace=FALSE)
ArBr.training <- ArBr.scaled[training, ]
ArBr.test <- ArBr.scaled[-training, ]
ArI <- seq(3, nrow(output.scaled), by=3)
ArI.scaled <- output.scaled[ArI, ]
ArI.scaled <- ArI.scaled[!(is.na(ArI.scaled$yield)), ]
set.seed(6123)
size <- round(0.70*nrow(ArI.scaled))
training <- sample(nrow(ArI.scaled), size=size, replace=FALSE)
ArI.training <- ArI.scaled[training, ]
ArI.test <- ArI.scaled[-training, ]
# nonpyridyl aryl halides
nonpyridyl <- sort(c(CF3.Cl, CF3.Br, CF3.I, OMe.Cl, OMe.Br, OMe.I, Et.Cl, Et.Br, Et.I))
nonpyridyl.scaled <- output.scaled[nonpyridyl, ]
nonpyridyl.scaled <- nonpyridyl.scaled[!(is.na(nonpyridyl.scaled$yield)), ]
# pyridyl aryl halides
pyridyl <- sort(c(pyr2.Cl, pyr2.Br, pyr2.I, pyr3.Cl, pyr3.Br, pyr3.I))
pyridyl.scaled <- output.scaled[pyridyl, ]
pyridyl.scaled <- pyridyl.scaled[!(is.na(pyridyl.scaled$yield)), ]
# yields under 80% and over 80%
under80 <- output.scaled$yield<80
output.under80 <- output.scaled[under80, ]
output.under80 <- output.under80[!(is.na(output.under80$yield)), ]
output.over80 <- output.scaled[!under80, ]
output.over80 <- output.over80[!(is.na(output.over80$yield)), ]
# ============================================================================
# Remove reactions without yield data and make histogram
# ============================================================================
# remove rows where yield=NA
output.scaled <- output.scaled[!(is.na(output.scaled$yield)), ]
# Histogram for modeling yields (removed controls and additive 7)
ggHist(output.scaled$yield, "yield_data\\allplates_nocontrols_histogram.png")
# ============================================================================
# Data splitting for modeling
# ============================================================================
# Split into training and test set (70/30)
set.seed(1084)
size <- round(0.70*nrow(output.scaled))
training <- sample(nrow(output.scaled), size=size, replace=FALSE)
training.scaled <- output.scaled[training,]
test.scaled <- output.scaled[-training,]
# Create smaller partitions within training set (equal to 10, 20, etc. % of TOTAL data)
# Sampled from within training set to avoid using test set data
size2.5 <- round(0.025*nrow(output.scaled))
size5 <- round(0.05*nrow(output.scaled))
size10 <- round(0.10*nrow(output.scaled))
size20 <- round(0.20*nrow(output.scaled))
size30 <- round(0.30*nrow(output.scaled))
size40 <- round(0.40*nrow(output.scaled))
size50 <- round(0.50*nrow(output.scaled))
size60 <- round(0.60*nrow(output.scaled))
training2.5rows <- sample(nrow(training.scaled),size=size2.5,replace=FALSE)
training2.5 <- training.scaled[training2.5rows, ]
training5rows <- sample(nrow(training.scaled),size=size5,replace=FALSE)
training5 <- training.scaled[training5rows, ]
training10rows <- sample(nrow(training.scaled),size=size10,replace=FALSE)
training10 <- training.scaled[training10rows, ]
training20rows <- sample(nrow(training.scaled),size=size20,replace=FALSE)
training20 <- training.scaled[training20rows, ]
training30rows <- sample(nrow(training.scaled),size=size30,replace=FALSE)
training30 <- training.scaled[training30rows, ]
training40rows <- sample(nrow(training.scaled),size=size40,replace=FALSE)
training40 <- training.scaled[training40rows, ]
training50rows <- sample(nrow(training.scaled),size=size50,replace=FALSE)
training50 <- training.scaled[training50rows, ]
training60rows <- sample(nrow(training.scaled),size=size60,replace=FALSE)
training60 <- training.scaled[training60rows, ]
# 10-fold cross-validation
train_control <- trainControl(method="cv", number=10, savePredictions=TRUE)
# ============================================================================
# Read in previously trained models saved as .rds files
# ============================================================================
# Run to read in previously trained models
lmFit.reduced <- readRDS("rds\\lmFit_reduced.rds")
knnFit <- readRDS("rds\\knnFit.rds")
svmFit <- readRDS("rds\\svmFit.rds")
bayesglmFit <- readRDS("rds\\bayesglmFit.rds")
lmFit <- readRDS("rds\\lmFit.rds")
nnetFit <- readRDS("rds\\nnetFit.rds")
rfFit <- readRDS("rds\\rfFit.rds")
rfFit2.5 <- readRDS("rds\\rfFit2_5.rds")
rfFit5 <- readRDS("rds\\rfFit5.rds")
rfFit10 <- readRDS("rds\\rfFit10.rds")
rfFit20 <- readRDS("rds\\rfFit20.rds")
rfFit30 <- readRDS("rds\\rfFit30.rds")
rfFit40 <- readRDS("rds\\rfFit40.rds")
rfFit50 <- readRDS("rds\\rfFit50.rds")
rfFit60 <- readRDS("rds\\rfFit60.rds")
rfFit70 <- readRDS("rds\\rfFit70.rds")
rfFit.LOO <- readRDS("rds\\rfFit_LOO.rds")
rfFit.ArCl <- readRDS("rds\\rfFit_ArCl.rds")
rfFit.ArBr <- readRDS("rds\\rfFit_ArBr.rds")
rfFit.ArI <- readRDS("rds\\rfFit_ArI.rds")
rfFit.ArBr.all <- readRDS("rds\\rfFit_ArBr_all.rds")
rfFit.nonpyridyl <- readRDS("rds\\rfFit_nonpyridyl.rds")
rfFit.under80 <- readRDS("rds\\rfFit_under80.rds")
# plates 1 and 2 (after NA's removed)
plate12 <- output.scaled[1:2515, ]
# plate 3 (after NA's removed)
plate3 <- output.scaled[2516:3955, ]
# leave-one-out by additive
by.additive <- split(seq_along(plate12$additive_.C3_NMR_shift), plate12$additive_.C3_NMR_shift)
tc.additive <- trainControl(method="cv", indexOut=by.additive, savePredictions = TRUE)
rf.predTrain.LOO <- predict(rfFit.LOO, plate12)
rf.predTrain.LOO.rmse <- rmse(rf.predTrain.LOO, plate12$yield)
rf.predTrain.LOO.r2 <- cor(rf.predTrain.LOO, plate12$yield)
rf.pred.LOO <- predict(rfFit.LOO, plate3)
rf.pred.LOO.rmse <- rmse(rf.pred.LOO, plate3$yield)
rf.pred.LOO.r2 <- cor(rf.pred.LOO, plate3$yield)
plate3$additive_id <- as.factor(plate3$additive_.C3_NMR_shift)
levels(plate3$additive_id) <- c('Additive 16', 'Additive 18', 'Additive 20', 'Additive 21',
'Additive 22', 'Additive 17', 'Additive 19', 'Additive 23')
plate3$additive_id <- sortLvls.fnc(plate3$additive_id, c(1, 6, 2, 7, 3, 4, 5, 8))
plate3$additive_id = factor(plate3$additive_id,levels(plate3$additive_id)[c(1, 6, 2, 7, 3, 4, 5, 8)])
df <- cbind(plate3, rf.pred.LOO)
p <- ggplot(df, aes(x=rf.pred.LOO, y=yield)) +
geom_point(alpha=0.4, aes(col=additive_id), size=1) +
labs(x='Predicted Yield', y='Observed Yield') +
xlim(0, 100) +
ylim(0, 100) +
geom_smooth(method='lm', se=FALSE, color="black", size=0.5) +
facet_wrap(~additive_id, nrow=2, ncol=4) +
geom_segment(aes(x=0, xend=100, y=0, yend=100), linetype="dashed", size=0.3) +
theme(legend.position="none")
ggsave(file="R\\plots\\additive_out_of_sample.png", width=8, height=4.5)
View(plate3)
additive.16.index <- plate3$additive_id == 'Additive 16'
additive.16.index
additive.16 <- plate3[plate3$additive_id == 'Additive 16', ]
utils::View(additive.16)
additive.16 <- plate3[plate3$additive_id == 'Additive 16', ]
rf.pred.16 <- predict(rfFit.LOO, additive.16)
rf.pred.16 <- predict(rfFit.LOO, additive.16)
rf.pred.16 <- rmse(rf.pred.16, additive.16$yield)
rf.pred.16 <- cor(rf.pred.16, additive.16$yield)
additive.16 <- plate3[plate3$additive_id == 'Additive 16', ]
rf.pred.16 <- predict(rfFit.LOO, additive.16)
rf.pred.16.rmse <- rmse(rf.pred.16, additive.16$yield)
rf.pred.16.r2 <- cor(rf.pred.16, additive.16$yield)
rf.pred.16.rmse
rf.pred.16.r2
View(rf.pred.16)
df1 <- data.frame(x = rf.pred.16,
y = additive.16$yield)
# Create calibration plot (predict Cl from Cl using random forest model)
p1 <- ggplot(df1, aes(x = x, y = y)) +
geom_point(alpha = 0.4) +
scale_x_continuous(breaks = seq(0, 100, 25), lim=c(0, 100)) +
labs(x='Predicted Yield', y='Observed Yield') +
geom_segment(aes(x=0, xend=100, y=0, yend=100), linetype="dashed") +
geom_smooth(method="loess", se=FALSE)
ggsave(file="R\\plots\\additive_16.png", width=5, height=4)
# Calculate RMSE and R^2 for additives 16-23
additive.16 <- plate3[plate3$additive_id=='Additive 16', ]
rf.pred.16 <- predict(rfFit.LOO, additive.16)
rf.pred.16.rmse <- rmse(rf.pred.16, additive.16$yield)
rf.pred.16.r2 <- cor(rf.pred.16, additive.16$yield)
additive.17 <- plate3[plate3$additive_id=='Additive 17', ]
rf.pred.17 <- predict(rfFit.LOO, additive.17)
rf.pred.17.rmse <- rmse(rf.pred.17, additive.17$yield)
rf.pred.17.r2 <- cor(rf.pred.17, additive.17$yield)
additive.18 <- plate3[plate3$additive_id=='Additive 18', ]
rf.pred.18 <- predict(rfFit.LOO, additive.18)
rf.pred.18.rmse <- rmse(rf.pred.18, additive.18$yield)
rf.pred.18.r2 <- cor(rf.pred.18, additive.18$yield)
additive.19 <- plate3[plate3$additive_id=='Additive 19', ]
rf.pred.19 <- predict(rfFit.LOO, additive.19)
rf.pred.19.rmse <- rmse(rf.pred.19, additive.19$yield)
rf.pred.19.r2 <- cor(rf.pred.19, additive.19$yield)
additive.20 <- plate3[plate3$additive_id=='Additive 20', ]
rf.pred.20 <- predict(rfFit.LOO, additive.20)
rf.pred.20.rmse <- rmse(rf.pred.20, additive.20$yield)
rf.pred.20.r2 <- cor(rf.pred.20, additive.20$yield)
additive.21 <- plate3[plate3$additive_id=='Additive 21', ]
rf.pred.21 <- predict(rfFit.LOO, additive.21)
rf.pred.21.rmse <- rmse(rf.pred.21, additive.21$yield)
rf.pred.21.r2 <- cor(rf.pred.21, additive.21$yield)
additive.22 <- plate3[plate3$additive_id=='Additive 22', ]
rf.pred.22 <- predict(rfFit.LOO, additive.22)
rf.pred.22.rmse <- rmse(rf.pred.22, additive.22$yield)
rf.pred.22.r2 <- cor(rf.pred.22, additive.22$yield)
additive.23 <- plate3[plate3$additive_id=='Additive 23', ]
rf.pred.23 <- predict(rfFit.LOO, additive.23)
rf.pred.23.rmse <- rmse(rf.pred.23, additive.23$yield)
rf.pred.23.r2 <- cor(rf.pred.23, additive.23$yield)
paste0("Additive 16: RMSE = ", rf.pred.16.rmse, ", R^2 = ", rf.pred.16.r2)
# Print RMSE and R^2 to console
paste0("Additive 16: RMSE = ", rf.pred.16.rmse, ", R^2 = ", rf.pred.16.r2)
paste0("Additive 17: RMSE = ", rf.pred.17.rmse, ", R^2 = ", rf.pred.17.r2)
paste0("Additive 18: RMSE = ", rf.pred.18.rmse, ", R^2 = ", rf.pred.18.r2)
paste0("Additive 19: RMSE = ", rf.pred.19.rmse, ", R^2 = ", rf.pred.19.r2)
paste0("Additive 20: RMSE = ", rf.pred.20.rmse, ", R^2 = ", rf.pred.20.r2)
paste0("Additive 21: RMSE = ", rf.pred.21.rmse, ", R^2 = ", rf.pred.21.r2)
paste0("Additive 22: RMSE = ", rf.pred.22.rmse, ", R^2 = ", rf.pred.22.r2)
paste0("Additive 23: RMSE = ", rf.pred.23.rmse, ", R^2 = ", rf.pred.23.r2)
# Predict for testing set
rf.pred2.5 <- predict(rfFit2.5, test.scaled)
rf.pred5 <- predict(rfFit5, test.scaled)
rf.pred10 <- predict(rfFit10, test.scaled)
rf.pred20 <- predict(rfFit20, test.scaled)
rf.pred30 <- predict(rfFit30, test.scaled)
rf.pred40 <- predict(rfFit40, test.scaled)
rf.pred50 <- predict(rfFit50, test.scaled)
rf.pred60 <- predict(rfFit60, test.scaled)
rf.pred70 <- predict(rfFit70, test.scaled)
# Plot expected vs. observed
# Create data frames
df1 <- data.frame(x = rf.pred2.5, y = test.scaled$yield, type = as.factor('2.5%'))
df2 <- data.frame(x = rf.pred5, y = test.scaled$yield, type = as.factor('5%'))
df3 <- data.frame(x = rf.pred10, y = test.scaled$yield, type = as.factor('10%'))
df4 <- data.frame(x = rf.pred20, y = test.scaled$yield, type = as.factor('20%'))
df5 <- data.frame(x = rf.pred30, y = test.scaled$yield, type = as.factor('30%'))
df6 <- data.frame(x = rf.pred40, y = test.scaled$yield, type = as.factor('40%'))
df7 <- data.frame(x = rf.pred50, y = test.scaled$yield, type = as.factor('50%'))
df8 <- data.frame(x = rf.pred60, y = test.scaled$yield, type = as.factor('60%'))
df9 <- data.frame(x = rf.pred70, y = test.scaled$yield, type = as.factor('70%'))
# R^2 values
rf.pred2.5.r2 <- cor(rf.pred2.5, test.scaled$yield)
rf.pred5.r2 <- cor(rf.pred5, test.scaled$yield)
rf.pred10.r2 <- cor(rf.pred10, test.scaled$yield)
rf.pred20.r2 <- cor(rf.pred20, test.scaled$yield)
rf.pred30.r2 <- cor(rf.pred30, test.scaled$yield)
rf.pred40.r2 <- cor(rf.pred40, test.scaled$yield)
rf.pred50.r2 <- cor(rf.pred50, test.scaled$yield)
rf.pred60.r2 <- cor(rf.pred60, test.scaled$yield)
rf.pred70.r2 <- cor(rf.pred70, test.scaled$yield)
# RMSE
rf.pred2.5.rmse <- rmse(rf.pred2.5, test.scaled$yield)
rf.pred5.rmse <- rmse(rf.pred5, test.scaled$yield)
rf.pred10.rmse <- rmse(rf.pred10, test.scaled$yield)
rf.pred20.rmse <- rmse(rf.pred20, test.scaled$yield)
rf.pred30.rmse <- rmse(rf.pred30, test.scaled$yield)
rf.pred40.rmse <- rmse(rf.pred40, test.scaled$yield)
rf.pred50.rmse <- rmse(rf.pred50, test.scaled$yield)
rf.pred60.rmse <- rmse(rf.pred60, test.scaled$yield)
rf.pred70.rmse <- rmse(rf.pred70, test.scaled$yield)
# create data frame containing RMSE and R^2 data for sparsity models
df <- data.frame(rmse = c(rf.pred2.5.rmse,
rf.pred5.rmse,
rf.pred10.rmse,
rf.pred20.rmse,
rf.pred30.rmse,
rf.pred50.rmse,
rf.pred70.rmse),
r2 = c(rf.pred2.5.r2,
rf.pred5.r2,
rf.pred10.r2,
rf.pred20.r2,
rf.pred30.r2,
rf.pred50.r2,
rf.pred70.r2))
row.names(df) <- c('2.5%', '5%', '10%', '20%', '30%', '50%', '70%')
# Plot RMSE and R^2 data
rmse.plot <- ggplot(df, aes(y=reorder(rownames(df), rmse), x=rmse)) +
geom_point() +
geom_text(label=round(df$rmse, 2), vjust=-1, size=2.5) +
labs(x='RMSE', y='') +
xlim(0, 20) +
coord_flip()
r2.plot <- ggplot(df, aes(y=reorder(rownames(df), rmse), x=r2)) +
geom_point() +
geom_text(label=round(df$r2, 2), vjust=-1, size=2.5) +
labs(x='Rsquared', y='') +
xlim(0.7, 1) +
coord_flip()
plots <- arrangeGrob(r2.plot, rmse.plot, ncol=2)
ggsave(plots, file="R\\plots\\rf_sparsity_r2_rmse.png", width=6, height=3)
rmse.plot <- ggplot(df, aes(x=reorder(rownames(df), rmse), y=rmse)) +
geom_point() +
geom_text(label=round(df$rmse, 2), vjust=-1, size=2.5) +
labs(x='RMSE', y='') +
xlim(0, 20)
r2.plot <- ggplot(df, aes(x=reorder(rownames(df), rmse), y=r2)) +
geom_point() +
geom_text(label=round(df$r2, 2), vjust=-1, size=2.5) +
labs(x='Rsquared', y='') +
xlim(0.7, 1)
plots <- arrangeGrob(r2.plot, rmse.plot, ncol=2)
ggsave(plots, file="R\\plots\\rf_sparsity_r2_rmse.png", width=6, height=3)
rmse.plot <- ggplot(df, aes(y=reorder(rownames(df), rmse), x=rmse)) +
geom_point() +
geom_text(label=round(df$rmse, 2), vjust=-1, size=2.5) +
labs(x='', y='RMSE') +
xlim(0, 20) +
coord_flip()
r2.plot <- ggplot(df, aes(y=reorder(rownames(df), rmse), x=r2)) +
geom_point() +
geom_text(label=round(df$r2, 2), vjust=-1, size=2.5) +
labs(x='', y='Rsquared') +
xlim(0.7, 1) +
coord_flip()
plots <- arrangeGrob(r2.plot, rmse.plot, ncol=2)
ggsave(plots, file="R\\plots\\rf_sparsity_r2_rmse.png", width=6, height=3)
# Plot RMSE and R^2 data
rmse.plot <- ggplot(df, aes(y=reorder(rownames(df), rmse), x=rmse)) +
geom_point() +
geom_text(label=round(df$rmse, 2), vjust=-1, size=2.5) +
labs(x='RMSE', y='Training Set Data (%)') +
xlim(0, 20) +
coord_flip()
r2.plot <- ggplot(df, aes(y=reorder(rownames(df), rmse), x=r2)) +
geom_point() +
geom_text(label=round(df$r2, 2), vjust=-1, size=2.5) +
labs(x='Rsquared', y='Training Set Data (%)') +
xlim(0.7, 1) +
coord_flip()
plots <- arrangeGrob(r2.plot, rmse.plot, ncol=2)
ggsave(plots, file="R\\plots\\rf_sparsity_r2_rmse.png", width=6, height=3)
# Plot RMSE and R^2 data
rmse.plot <- ggplot(df, aes(y=reorder(rownames(df), rmse), x=rmse)) +
geom_point() +
geom_text(label=round(df$rmse, 2), vjust=-1, size=2.5) +
labs(x='RMSE', y='Training Set Data') +
xlim(0, 20) +
coord_flip()
r2.plot <- ggplot(df, aes(y=reorder(rownames(df), rmse), x=r2)) +
geom_point() +
geom_text(label=round(df$r2, 2), vjust=-1, size=2.5) +
labs(x='Rsquared', y='Training Set Data') +
xlim(0.7, 1) +
coord_flip()
plots <- arrangeGrob(r2.plot, rmse.plot, ncol=2)
ggsave(plots, file="R\\plots\\rf_sparsity_r2_rmse.png", width=6, height=3)
# Plot RMSE and R^2 data
rmse.plot <- ggplot(df, aes(y=reorder(rownames(df), -rmse), x=rmse)) +
geom_point() +
geom_text(label=round(df$rmse, 2), vjust=-1, size=2.5) +
labs(x='RMSE', y='Training Set Data') +
xlim(0, 20) +
coord_flip()
r2.plot <- ggplot(df, aes(y=reorder(rownames(df), -rmse), x=r2)) +
geom_point() +
geom_text(label=round(df$r2, 2), vjust=-1, size=2.5) +
labs(x='Rsquared', y='Training Set Data') +
xlim(0.7, 1) +
coord_flip()
plots <- arrangeGrob(r2.plot, rmse.plot, ncol=2)
ggsave(plots, file="R\\plots\\rf_sparsity_r2_rmse.png", width=6, height=3)
